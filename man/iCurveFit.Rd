% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/iCurveFit.R
\name{iCurveFit}
\alias{iCurveFit}
\title{Interactive Curve Fitting}
\usage{
iCurveFit(
  formula = y ~ x,
  n = 5,
  model = "lm",
  prn = 100,
  xlim = c(0, 10),
  ylim = c(0, 10),
  ...
)
}
\arguments{
\item{formula}{formula for the model to be fitted to the entered data}

\item{n}{numeric, number of data points to be entered}

\item{model}{character, name of the model-fitting function to be used for
the entered data}

\item{prn}{numeric, number of points used to evaluate the fitted model,
important only for plotting the fitted curve}

\item{xlim}{numeric of length 2, limits for the horizontal axis}

\item{ylim}{numeric of length 2, limits for the vertical axis}

\item{...}{other arguments passed to the model-fitting function}
}
\value{
A model object created for the supplied data with the model-fitting
function specified with \code{model}.
}
\description{
Interactively enter a set of points and then fit a curve of specified form
to get a coefficients.
}
\details{
Frequently there is a need to quickly come up with a particular form of a
function. This function enables to quickly fit a curve of certain kind to a,
usually small, number of data points.

The function starts with creating an empty plotting region ready for input
of \code{n} data points. Every data input (through \code{locator}) results
in adding a point to the plot with a subsequent number. After the data are
inputed the function uses model-fitting function specified with \code{model}
to fit the curve specified with \code{formula} with possibly additional
arguments passed through \code{...}.

The \code{formula} argument has a usual form as in almost all model-fitting
functions in . It can contain only variables \code{y} and \code{x}.
Furthermore, direct transformations of \code{y} are not supported. All
transformations of \code{x} should be enclosed in \code{I()} function.

The function was designed to be used with \code{lm} or \code{glm} as
model-fitting functions. However, in principle, it should be possible to use
any other function that provides similar interface, i.e. \code{formula} and
\code{data} arguments, and the corresponding \code{predict} method.

Once the model is fitted the function finds its predicted values for a
sequence of values defined by \code{xlim} of length \code{prn}. Then the
curve itself is added to the plot. Finally the model object is returned.
}
\examples{

\dontrun{
# fitting via 'lm'
iCurveFit(formula= y ~ x ) # linear
iCurveFit(formula= y ~ I(x^2) + x ) # parabolic
iCurveFit(formula= y ~ I(x^3) + I(x^2) + x, n=7) # polynomial of degree 3
iCurveFit(formula= y ~ I(sin(x)), n=7) # sinusoidal
iCurveFit(formula= y ~ I(log(x)), n=7) # log
iCurveFit(formula= y ~ I(1/x), n=7) # hyperbolic
}

}
\seealso{
See \code{\link{lowess}} and \code{\link{spline}} for other curve
fitting functions, \code{\link{lm}} and \code{\link{glm}} for help with th
model-fitting functions supported. Also see \code{\link{predict}} and
\code{\link{I}}
}
