% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/git.R
\name{git}
\alias{git}
\alias{git_log}
\alias{git_commit_edgelist}
\alias{git_commits}
\alias{git_refs}
\alias{git_commit_graph}
\alias{Vref}
\title{Git querying}
\usage{
git_log(dir = ".", format_log, delim = " ", ...)

git_commit_edgelist(dir = ".")

git_commits(dir = ".", col_types)

git_refs(dir = ".")

git_commit_graph(dir = ".")

Vref(g, refs)
}
\arguments{
\item{dir}{directory with git repo, defaults to current directory}

\item{format_log}{character vector of \verb{git log} format options}

\item{delim, ...}{passed to \code{\link[readr:read_delim]{readr::read_delim()}} usually \code{col_names} or
\code{col_types} need to be specified too}

\item{col_types}{passed to \code{\link[readr:read_delim]{readr::read_delim()}}, defaults to \code{"ciT"}}

\item{g}{a graph built with \code{git_commit_graph()}}

\item{refs}{commit refs}
}
\value{
Function \code{git_log()} returns a tibble with as many columns as there
are fields requested with \code{format_log} and parsed by \code{\link[readr:read_delim]{readr::read_delim()}}
using \code{delim}.

Function \code{git_commit_edgelist()} returns a two-column tibble with
columns:
\itemize{
\item \code{.commit} - hash of a commit
\item \code{.parent} - hash of a parent of the \code{.commit}
}

Function \code{git_commits()} returns a tibble with columns:
\itemize{
\item \code{.commit} - commit hash
\item \code{author_timestamp} - Linux timestamp of author date
\item \code{author_datetime} - author date in strict ISO 8601 format
}

Function \code{git_refs()} returns a tibble with a row for each ref and
the following columns:
\itemize{
\item \code{.commit} - commit hash
\item \code{ref} - full name of the ref, e.g. \code{refs/heads/master} or
\code{refs/remotes/origin/HEAD}
}

The igraph object returned by \code{git_commit_graph()} has vertices
correspond to commits and edges point from commits to their parents. It has
additionally the following attributes defined:
\itemize{
\item \code{refs} - graph attribute holding a tibble as returned by \code{\link[=git_refs]{git_refs()}}
\item \code{name} - vertex attribute with commit hash
\item \code{author_timestamp} - vertex attribute with author date timestamp
\item \code{author_datetime} - vertex attribute with author date in ISO  8601 format
}

Function \code{Vref()} works similarly to \code{\link[igraph:V]{igraph::V()}} returning vertex
sequence for vertices in \code{g} corresponding to refs specifed by \code{refs}.
}
\description{
Various tools for querying Git history as a Directed Acyclic
Graph (DAG).

\itemize{
\item \code{git_log()} - a low-level interface
}

\itemize{
\item \code{git_commit_edgelist()} - assemble an edgelist of the commit
graph in which a directed edge connects a commit to its parent.
}

\itemize{
\item \code{git_commits()} - assemble a database of git commits with hash
and author date time
}

\itemize{
\item \code{git_refs()} - fetch information about Git refs
}

\itemize{
\item \code{git_commit_graph()} - create an igraph object with the
complete history of the repository.
}

\itemize{
\item \code{Vref()} - custom creation of vertex sequences
}
}
\details{
Function \code{git_log()} runs \verb{git log} in \code{dir} passing \code{format_log}
collapsed with white spaces to the \code{--format} option. The command is run
with \code{--all} option to include all the branches.

Do note, wrt \code{git_commit_edgelist()}, that a commit can be a parent
of more than one commit (i.e., when the history "forks") and a commit can
have multiple parents (i.e. in case of merge commits).

For \code{git_commits()} if \code{col_types} is missing (default) it is
assumed to be \code{"ciT"}
}
